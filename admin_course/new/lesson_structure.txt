For brother: 
    - go through the main foundational exercises <-- do have tests in between
        - then, proceed to the advanced foundational exercises
            - once solid <-- have a single test
                - then, work on small projects:
                    - Working with APIs
                    - Data Analysis Project from Kaggle dataset <-- great introduction to data-science
                    - LeetCode --> work through the easy problems
    - doesn't need to do all the exercises but a good amount. 
        - i need to have that confidence that he knows everything


Foundational Exercises:


- Create a program that first defines a variable, s = "Hello World". Then it prints the variable, along with it's type.
- Create a program that asks the user for their name and then prints a greeting using their name (ie. "Hello" + name)
- Write a program that asks the user for their first name and last name, and then prints their full name using string concatenation.
- Write a program that asks the user for their name and age and then prints a message like "Hello, [Name]! You are [Age] years old."
- Write a program that calculates the sum of two numbers entered by the user.
- Write a program that prints the square of a number, entered by the user.
- Create a program that asks the user for their age and then determines if they are a minor (under 18) or an adult.
- Write a program that determines the data type of a given variable (e.g., integer, float, string, list). If integer, return "integer". If string, return "string". If list, return "list". If float, return "float".

- Create a program that converts temperatures between Celsius (C) and Fahrenheit (F). Round to temperature value to 1 digit. Return the converted temperature.
- Given a string, write a program that prints the first three characters, the last three characters, and a substring containing characters from the 4th to the 6th position.
- Write a program that prints the first 10 positive numbers using a for loop.
- Write a Python program that generates a multiplication table from 1-12 for a given number (e.g., 7).
- Write a program that asks the user to enter a word and then uses a for loop to count and print the number of characters in the word.
- Ask the user for a sentence and a character. Use a for loop to replace all occurrences of that character in the sentence with "+". Print the modified sentence.
- Ask the user for a string. Iterate through the string using the range and for loop function and print each character in the string.
- Create a program that asks the user for a sentence and uses a for loop to count and print the number of words in the sentence.
- Write a program that takes a original list, and creates a new list, with each of the original number squared (ie. x ** 2).
- Write a program that calculates and prints the sum of all numbers from 1 to 100 using a for loop. Print final sum.

- Given a list of numbers, write a program that calculates and prints the sum of all the numbers in the list using a for loop.
- Given a list of numbers, write a program that finds and prints all unique elements in the list (no duplicates).
- Write a Python program to reverse a given list without using list slicing or built-in functions. Return a new list, which is in reverse order.
- Design a program that checks if a given word or phrase is a palindrome (reads the same forwards and backwards; ie. radar is a palindrome word), ignoring spaces and punctuation.
- Create a program that asks the user to enter a number and then counts and prints how many times that number appears in a list of numbers.
- Given a list of numbers, write a program that finds and prints the maximum and minimum numbers in the list using a for loop.
- Generate and print the first 20 numbers in the Fibonacci sequence using a for loop. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones.
- Ask the user for a sentence. Print all the words that fall in the even index.
- Given a full name (separated by space), write a program that extracts the initials from the name and returns them to the user.
- Given a list of words, use a for loop to concatenate all the words in the list into a single sentence, with no spaces. Print the resulting sentence.

- Given a list of words, use a for loop to find and print the longest word in the list.
- Create a program that determines whether a number is a prime or not.
- Given a dictionary of student names and their corresponding ages {Alice -> 18, Bob -> 20, Charlie -> 19}, write a program that prints both Bob and Alices age.
- Given a dictionary of courses and their corresponding instructors, write a program that prints all the course names and their instructors.
- Given a dictionary of student names and their corresponding scores, write a program that calculates and prints the average score of all the students. student_scores = {"Alice": 85, "Bob": 92, "Charlie": 78, "David": 95, "Eve": 88}
- Create an empty dictionary. Using a for loop, map the numbers from 1 to 10, with their squares. Key should be number and value should be the square (ie. 2 -> 4). Return the new dictionary
- Given a dictionary of student names and their exam scores, write a program that prints the names of students who scored above 80. Print the students name and grade. exam_scores = {Alice -> 85, Bob -> 92, Charlie -> 78, David -> 95}-
- Given a dictionary that maps items to their prices, create a new dictionary that maps prices to a list of items with that price. items = {"apple": 0.5, "banana": 0.25, "orange": 0.75, "kiwi": 0.6, "mango": 1.0}
- Given a sentence, create a program that counts the frequency of each word using a dictionary. Ignore punctuation and make the program case-insensitive.
- Given a list of numbers, find and return the maximum sum.

- Given a list of numbers, find and return the minimum sum.
- Given a list of numbers, for each nums[i] find out how many numbers in the array are smaller than it. Example: nums = [8,1,2,2,3] --> Output: [4,0,1,1,3]
- Given the following 2D list, [[1,2,3], [5,10,11], [20,0,9], [17,9,31,5]], calculate and print the total sum of all the numbers in the list.
- Given the following 2D list, [[1,2,3], [5,10,11], [20,0,9], [17,9,31,5]], calculate and print the total sum of just the 2 second.
- Given the following 2D list, [[1,2,3], [5,10,11], [20,0,9], [17,9,31,5]], calculate and print the total sum of all the numbers in the list that fall on the odd index.


More "Advanced Foundational Exercises"
- Imagine you have a list of student records, where each record is represented as a dictionary containing the student's name, age, and test scores. Write a program to calculate and print the average test score for all students. You should also determine and print the student with the highest test score. students = [{"name": "Alice", "age": 18, "scores": [85, 92, 88]}, {"name": "Bob", "age": 19, "scores": [92, 78, 95]}, {"name": "Charlie", "age": 20, "scores": [90, 85, 92]}, {"name": "David", "age": 21, "scores": [78, 92, 88]}, {"name": "Eve", "age": 19, "scores": [88, 90, 92]}, {"name": "Frank", "age": 20, "scores": [95, 85, 78]}]
- Create a program that reads a paragraph of text and extracts all unique words from the text. Then, print the total count of unique words, along with printing each of the words in alphabetical order, ignoring punctuation and making the program case-insensitive.
- Create a program that reads a paragraph of text from the user and extracts all unique words from the text. Then, print the words in alphabetical order, ignoring punctuation and making the program case-insensitive.
- Create a program that manages inventory items. Users should be able to add, remove, update, and view items in an inventory list, stored in a dictionary.
- Create a text-based version of the classic game "Rock, Paper, Scissors" against the computer. Use a while loop to allow the player to play multiple rounds until they choose to quit. Keep track of their wins, losses, and ties.


