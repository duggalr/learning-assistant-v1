Variable Type Printer | Create a program that first defines a variable, s = "Hello World". Then it prints the variable, along with its type.
Personalized Greeting | Create a program that asks the user for their name and then prints a greeting using their name (i.e., "Hello" + name). | Test Case 1: Input: John --> Output: Hello John, Test Case 2: Input: Alice --> Output: Hello Alice, Test Case 3: Input: Bob --> Output: Hello Bob, Test Case 4: Input: Sarah --> Output: Hello Sarah
Full Name Printer | Write a program that asks the user for their first name and last name, and then prints their full name using string concatenation. | Test Case 1: Input: First Name = John, Last Name = Doe --> Output: Full Name = John Doe, Test Case 2: Input: First Name = Alice, Last Name = Smith --> Output: Full Name = Alice Smith, Test Case 3: Input: First Name = Bob, Last Name = Johnson --> Output: Full Name = Bob Johnson
Greeting with Age | Write a program that asks the user for their name and age and then prints a message like "Hello, [Name]! You are [Age] years old." | Test Case 1: Input: Name = Emily, Age = 25 --> Output: Hello, Emily! You are 25 years old., Test Case 2: Input: Name = David, Age = 42 --> Output: Hello, David! You are 42 years old., Test Case 3: Input: Name = Sarah, Age = 18 --> Output: Hello, Sarah! You are 18 years old.
Sum Calculator | Write a program that calculates the sum of two numbers entered by the user. | Test Case 1: Input: Number 1 = 5, Number 2 = 7 --> Output: Sum = 12, Test Case 2: Input: Number 1 = -3, Number 2 = 10 --> Output: Sum = 7, Test Case 3: Input: Number 1 = 0, Number 2 = 0 --> Output: Sum = 0
Square Printer | Write a program that prints the square of a number, entered by the user. | Test Case 1: Input: Number = 4 --> Output: Square = 16, Test Case 2: Input: Number = 8 --> Output: Square = 64, Test Case 3: Input: Number = -3 --> Output: Square = 9
Age Classifier | Create a program that asks the user for their age and then determines if they are a minor (under 18) or an adult. | Test Case 1: Input: Age = 15 --> Output: Minor, Test Case 2: Input: Age = 22 --> Output: Adult, Test Case 3: Input: Age = 17 --> Output: Minor
Data Type Identifier | Write a program that determines the data type of a given variable (e.g., integer, float, string, list). If integer, return "integer". If string, return "string". If list, return "list". If float, return "float". | Test Case 1: Input: Variable = 42 --> Output: Data Type = integer, Test Case 2: Input: Variable = "Hello, World!" --> Output: Data Type = string, Test Case 3: Input: Variable = [1, 2, 3] --> Output: Data Type = list, Test Case 4: Input: Variable = 3.14 --> Output: Data Type = float
Temperature Converter | Create a program that converts temperatures between Celsius (C) and Fahrenheit (F). Round the temperature value to 1 digit. Return the converted temperature. | Test Case 1: Input: Temperature = 25 C --> Output: Converted Temperature = 77.0 F, Test Case 2: Input: Temperature = 68.4 F --> Output: Converted Temperature = 20.2 C
String Slicer | Given a string, write a program that prints the first three characters, the last three characters, and a substring containing characters from the 4th to the 6th position. | Test Case 1: Input: String = "Hello, World!" --> Output: First 3 characters = Hel, Last 3 characters = ld!, Substring = lo, Test Case 2: Input: String = "Python Programming" --> Output: First 3 characters = Pyt, Last 3 characters = ing, Substring = on
First 10 Positive Numbers | Write a program that prints the first 10 positive numbers using a for loop. | Test Case 1: Input: N/A (no user input) --> Output: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
Multiplication Table Generator | Write a Python program that generates a multiplication table from 1-12 for a given number (e.g., 7). | Test Case 1: Input: Number = 7 --> Output: 7 x 1 = 7, 7 x 2 = 14, ... , 7 x 12 = 84
Word Length Counter | Write a program that asks the user to enter a word and then uses a for loop to count and print the number of characters in the word. | Test Case 1: Input: Word = "Hello" --> Output: Number of characters: 5, Test Case 2: Input: Word = "Python" --> Output: Number of characters: 6
Character Replacer | Ask the user for a sentence and a character. Use a for loop to replace all occurrences of that character in the sentence with "+". Print the modified sentence. | Test Case 1: Input: Sentence = "Hello, World!", Character = "o" --> Output: Hell+, W+rld!, Test Case 2: Input: Sentence = "This is a test.", Character = "i" --> Output: Th+s +s a test.
String Iterator | Ask the user for a string. Iterate through the string using the range and for loop function and print each character in the string. | Test Case 1: Input: String = "Programming" --> Output: P, r, o, g, r, a, m, m, i, n, g
Word Counter | Create a program that asks the user for a sentence and uses a for loop to count and print the number of words in the sentence. | Test Case 1: Input: Sentence = "This is a test sentence." --> Output: Number of words: 5, Test Case 2: Input: Sentence = "Count me too!" --> Output: Number of words: 3
Square List Generator | Write a program that takes an original list and creates a new list, with each of the original numbers squared (i.e., x ** 2). | Test Case 1: Input: Original List = [1, 2, 3, 4, 5] --> Output: Squared List = [1, 4, 9, 16, 25], Test Case 2: Input: Original List = [0, -1, 2, -2] --> Output: Squared List = [0, 1, 4, 4]
Sum of Numbers | Write a program that calculates and prints the sum of all numbers from 1 to 100 using a for loop. Print the final sum. | Test Case 1: Input: N/A (no user input) --> Output: Sum of numbers from 1 to 100 = 5050
Sum of List | Given a list of numbers, write a program that calculates and prints the sum of all the numbers in the list using a for loop. | Test Case 1: Input: List = [1, 2, 3, 4, 5] --> Output: Sum = 15, Test Case 2: Input: List = [-2, 5, 8, -1] --> Output: Sum = 10
Unique Elements | Given a list of numbers, write a program that finds and prints all unique elements in the list (no duplicates). | Test Case 1: Input: List = [1, 2, 2, 3, 4, 4, 5] --> Output: Unique Elements = [1, 2, 3, 4, 5], Test Case 2: Input: List = [-2, 5, 5, 8, -2] --> Output: Unique Elements = [-2, 5, 8]
List Reverser | Write a Python program to reverse a given list without using list slicing or built-in functions. Return a new list, which is in reverse order. | Test Case 1: Input: List = [1, 2, 3, 4, 5] --> Output: Reversed List = [5, 4, 3, 2, 1], Test Case 2: Input: List = ["apple", "banana", "cherry"] --> Output: Reversed List = ["cherry", "banana", "apple"]
Palindrome Checker | Design a program that checks if a given word or phrase is a palindrome (reads the same forwards and backwards; i.e., radar is a palindrome word), ignoring spaces and punctuation. | Test Case 1: Input: Word/Phrase = "racecar" --> Output: Palindrome, Test Case 2: Input: Word/Phrase = "radar" --> Output: Palindrome, Test Case 3: Input: Word/Phrase = "hello" --> Output: Not a Palindrome
Number Counter | Create a program that asks the user to enter a number and then counts and prints how many times that number appears in a list of numbers. | Test Case 1: Input: Number = 3, List = [1, 2, 3, 4, 3, 5, 3] --> Output: Count = 3, Test Case 2: Input: Number = 7, List = [7, 7, 7, 1, 2, 3] --> Output: Count = 3
Max and Min Finder | Given a list of numbers, write a program that finds and prints the maximum and minimum numbers in the list using a for loop. | Test Case 1: Input: List = [1, 5, -3, 8, 0] --> Output: Maximum = 8, Minimum = -3, Test Case 2: Input: List = [11, 7, 20, 15, 4] --> Output: Maximum = 20, Minimum = 4
Fibonacci Sequence | Generate and print the first 20 numbers in the Fibonacci sequence using a for loop. The Fibonacci sequence starts with 0 and 1, and each subsequent number is the sum of the two preceding ones. | Test Case 1: Input: N/A (no user input) --> Output: Fibonacci Sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181
Even Index Words | Ask the user for a sentence. Print all the words that fall in the even index. | Test Case 1: Input: Sentence = "This is a test sentence." --> Output: Words at even index: is, test, Test Case 2: Input: Sentence = "Python programming is fun!" --> Output: Words at even index: programming, fun!
Initials Extractor | Given a full name (separated by space), write a program that extracts the initials from the name and returns them to the user. | Test Case 1: Input: Full Name = "John Doe" --> Output: Initials = JD, Test Case 2: Input: Full Name = "Alice Johnson Smith" --> Output: Initials = AJS
Word Concatenator | Given a list of words, use a for loop to concatenate all the words in the list into a single sentence, with no spaces. Print the resulting sentence. | Test Case 1: Input: List of Words = ["Hello", "world", "in", "Python"] --> Output: Concatenated Sentence = HelloWorldinPython, Test Case 2: Input: List of Words = ["This", "is", "a", "test."] --> Output: Concatenated Sentence = Thisisatest.
Longest Word Finder | Given a list of words, use a for loop to find and print the longest word in the list. | Test Case 1: Input: List of Words = ["apple", "banana", "cherry", "blueberry"] --> Output: Longest Word = blueberry, Test Case 2: Input: List of Words = ["programming", "is", "fun"] --> Output: Longest Word = programming
Prime Number Checker | Create a program that determines whether a number is prime or not. | Test Case 1: Input: Number = 7 --> Output: Prime, Test Case 2: Input: Number = 4 --> Output: Not Prime
Student Age Printer | Given a dictionary of student names and their corresponding ages {"Alice": 18, "Bob": 20, "Charlie": 19}, write a program that prints both Bob and Alice's age. | Test Case 1: Input: Dictionary = {"Alice": 18, "Bob": 20, "Charlie": 19} --> Output: Alice's Age: 18, Bob's Age: 20
Course Instructor Printer | Given a dictionary of courses and their corresponding instructors, write a program that prints all the course names and their instructors. | Test Case 1: Input: Dictionary = {"Math": "Mr. Smith", "Science": "Mrs. Johnson", "History": "Mr. Brown"} --> Output: Math - Mr. Smith, Science - Mrs. Johnson, History - Mr. Brown
Average Score Calculator | Given a dictionary of student names and their corresponding scores, write a program that calculates and prints the average score of all the students. student_scores = {"Alice": 85, "Bob": 92, "Charlie": 78, "David": 95, "Eve": 88} | Test Case 1: Input: Dictionary = {"Alice": 85, "Bob": 92, "Charlie": 78, "David": 95, "Eve": 88} --> Output: Average Score = 87.6
Number Square Mapper | Create an empty dictionary. Using a for loop, map the numbers from 1 to 10 with their squares. Key should be the number and value should be the square (e.g., 2 -> 4). Return the new dictionary. | Test Case 1: Input: N/A (no user input) --> Output: {1: 1, 2: 4, 3: 9, 4: 16, 5: 25, 6: 36, 7: 49, 8: 64, 9: 81, 10: 100}
High-Scoring Students | Given a dictionary that maps student names to their exam scores, write a program that prints the names of students who scored above 80 along with their grades. exam_scores = {"Alice": 85, "Bob": 92, "Charlie": 78, "David": 95} | Test Case 1: Input: Dictionary = {"Alice": 85, "Bob": 92, "Charlie": 78, "David": 95} --> Output: Bob - A, Alice - A, David - A
Price Item Mapper | Given a dictionary that maps items to their prices, create a new dictionary that maps prices to a list of items with that price. items = {"apple": 0.5, "banana": 0.25, "orange": 0.75, "kiwi": 0.6, "mango": 1.0} | Test Case 1: Input: Dictionary = {"apple": 0.5, "banana": 0.25, "orange": 0.75, "kiwi": 0.6, "mango": 1.0} --> Output: {0.5: ['apple'], 0.25: ['banana'], 0.75: ['orange'], 0.6: ['kiwi'], 1.0: ['mango']}
Word Frequency Counter | Given a sentence, create a program that counts the frequency of each word using a dictionary. Ignore punctuation and make the program case-insensitive. | Test Case 1: Input: Sentence = "This is a test sentence. This is a test!" --> Output: {'this': 2, 'is': 2, 'a': 2, 'test': 2, 'sentence': 1}, Test Case 2: Input: Sentence = "Python programming is fun. Python is cool!" --> Output: {'python': 2, 'programming': 1, 'is': 2, 'fun': 1, 'cool': 1}
Maximum Sum Finder | Given a list of numbers, find and return the maximum sum. | Test Case 1: Input: List of Numbers = [1, 2, 3, 4, 5] --> Output: Maximum Sum = 15, Test Case 2: Input: List of Numbers = [-2, 5, 8, -1] --> Output: Maximum Sum = 12
Minimum Sum Finder | Given a list of numbers, find and return the minimum sum. | Test Case 1: Input: List of Numbers = [1, 2, 3, 4, 5] --> Output: Minimum Sum = 1, Test Case 2: Input: List of Numbers = [-2, 5, 8, -1] --> Output: Minimum Sum = -2
Count Smaller Numbers | Given a list of numbers, for each nums[i], find out how many numbers in the array are smaller than it. Example: nums = [8, 1, 2, 2, 3] --> Output: [4, 0, 1, 1, 3] | Test Case 1: Input: List of Numbers = [8, 1, 2, 2, 3] --> Output: [4, 0, 1, 1, 3], Test Case 2: Input: List of Numbers = [5, 5, 5, 5] --> Output: [0, 0, 0, 0]
Total Sum of 2D List | Given the following 2D list, [[1, 2, 3], [5, 10, 11], [20, 0, 9], [17, 9, 31, 5]], calculate and print the total sum of all the numbers in the list. | Test Case 1: Input: 2D List = [[1, 2, 3], [5, 10, 11], [20, 0, 9], [17, 9, 31, 5]] --> Output: Total Sum = 154
Total Sum of 2D List Row | Given the following 2D list, [[1, 2, 3], [5, 10, 11], [20, 0, 9], [17, 9, 31, 5]], calculate and print the total sum of just the 2nd row. | Test Case 1: Input: 2D List = [[1, 2, 3], [5, 10, 11], [20, 0, 9], [17, 9, 31, 5]] --> Output: Total Sum of 2nd Row = 26
Total Sum of 2D List Odd Index | Given the following 2D list, [[1, 2, 3], [5, 10, 11], [20, 0, 9], [17, 9, 31, 5]], calculate and print the total sum of all the numbers in the list that fall on the odd index. | Test Case 1: Input: 2D List = [[1, 2, 3], [5, 10, 11], [20, 0, 9], [17, 9, 31, 5]] --> Output: Total Sum of Odd Index Numbers = 40
