["Course Notes: Introduction to Cryptography and Basic Ciphers"]

## Student Goals/Background Information:
- The student aims to learn about basic ciphers, focusing initially on substitutions, to encrypt and decrypt messages.
- They aspire to use this knowledge to develop a program for friends to send encrypted messages via a URL.
- The student is comfortable with Python for implementing cryptographic algorithms but lacks strong mathematical skills.
- The student can dedicate around 10 hours per week to this learning journey.

##Week 1: Fundamentals of Cryptography

### Definition and Basics of Cryptography:
Cryptography is the science of securing communication from adversaries. It transforms a plain message into an unintelligible text (encryption) and reverses the process (decryption). Two primary forms are symmetric-key and asymmetric-key cryptography.

1. **Symmetric-key Cryptography:**
   - Both parties share a single key for encryption and decryption.
   - Faster than asymmetric cryptography but faces challenges in secure key distribution.
   - Example algorithms: AES, DES, and One-Time Pad.

2. **Asymmetric-key (Public Key) Cryptography:**
   - Uses a pair of keys: a public key for encryption and a private key for decryption.
   - Solves the key distribution problem but is computationally heavier.
   - Example algorithms: RSA, ECC.

### Importance and Real-life Application of Cryptography:
- **Secure Communication:** Enables confidential conversation over insecure channels.
- **Authentication:** Verifies the identity of the parties involved in communication.
- **Digital Signatures:** Provides a means to ensure the integrity and non-repudiation of electronic documents.

### Real-life Example:
- **Banking Systems:** Cryptography protects transactions, ensuring both confidentiality and integrity.
- **Email Encryption:** Protocols like PGP and S/MIME use cryptography to secure email communication.

### Introduction to Python Libraries for Cryptography:
Python provides libraries that simplify the implementation of cryptographic operations.

1. **PyCrypto**: Offers cryptographic modules dealing with many algorithms. Commands like `import Crypto.Cipher.AES` allow interactions with AES.

2. **Cryptography**: Provides both high-level recipes and low-level interfaces to common cryptographic algorithms. Usage involves `from cryptography.fernet import Fernet` for symmetric encryption.

3. **Hashlib**: Built-in Python library for Secure Hash Algorithms (SHA). Usage example: `import hashlib; hashlib.sha256("message".encode('utf-8')).hexdigest()`.

### Practicum - One-Time Pad Example:
One-Time Pad (OTP) serves as an example of symmetric-key cryptography deemed theoretically unbreakable if used correctly. The key must be as long as the message, completely random, and used only once.

#### Python Implementation:
```python
from os import urandom

def one_time_pad_encrypt(message):
    # key generation equal to message length
    key = urandom(len(message))
    ciphertext = bytearray([_a ^ _b for _a, _b in zip(message.encode(), key)])
    
    return ciphertext, key

def one_time_pad_decrypt(ciphertext, key):
    plaintext = bytearray([_a ^ _b for _a, _b in zip(ciphertext, key)])
    
    return plaintext.decode()

# Example Use
message = "Secret Message"
ciphertext, key = one_time_pad_encrypt(message)
print("Encrypted:", ciphertext)

plaintext = one_time_pad_decrypt(ciphertext, key)
print("Decrypted:", plaintext)
```

In this example, `urandom` generates a secure random key. The encryption and decryption process rely on the XOR (^) operation, reflecting the essence of One-Time Pad cryptography. Begin experimenting with this to deepen your understanding before moving to more complex ciphers and concepts.