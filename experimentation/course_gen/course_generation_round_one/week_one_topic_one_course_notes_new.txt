["Course Notes: Fundamentals of Cryptography"]

### Definition and Basics of Cryptography
Cryptography is the art and science of securing communication in the presence of adversaries. It involves creating written or generated codes that allow information to be kept secret. Cryptography enables you to store sensitive data or transmit it across insecure networks (like the internet) so that it cannot be read by anyone except the intended recipient.

### Symmetric vs Asymmetric Key Cryptography
**Symmetric-key Cryptography**: Here, the same key is used for both encryption (converting plaintext into ciphertext) and decryption (converting ciphertext back to plaintext). An example of symmetric-key algorithms includes AES (Advanced Encryption Standard).

- **Pros**: Generally faster than asymmetric cryptography; ideal for encrypting large amounts of data.
- **Cons**: Key distribution is a challenge; both sender and receiver must securely share the secret key.

**Asymmetric-key Cryptography (Public Key Cryptography)**: Involves two keysâ€”a public key, which is shared publicly, and a private key, which is kept secret. The public key encrypts data, and the corresponding private key decrypts it.

- **Pros**: Solves the key distribution problem; allows digital signatures.
- **Cons**: Slower than symmetric cryptography; computationally intensive.

### Importance and Real-life Application of Cryptography
Cryptography is essential for various reasons:
- **Data Security**: Protects data from theft or alteration.
- **User Authentication**: Verifies the identity of users and devices.
- **Secure Communications**: Ensures that data can be safely transmitted over the Internet, including emails, messages, and online transactions.
- **Digital Signatures**: Confirms the integrity and origin of a message or document.

**Real-life Applications**:
- Secure online banking and shopping.
- Protecting confidential communications, like military or government.
- Keeping personal data secure, including passwords and personal identification numbers (PINs).

### Introduction to Python Libraries for Cryptography
Python offers a rich ecosystem for cryptography through libraries such as `cryptography`, `PyCrypto`, and `hashlib`, providing tools for both symmetric and asymmetric encryption, hashing, and more.

**`cryptography`**: A popular package that includes both high-level recipes and low-level interfaces to common cryptographic algorithms such as symmetric ciphers, message digests, and key derivation functions.

Usage example (symmetric encryption with `Fernet`):

```python
from cryptography.fernet import Fernet
# Generate a key
key = Fernet.generate_key()
cipher_suite = Fernet(key)
# Encrypt a message
cipher_text = cipher_suite.encrypt(b"Secret message")
# Decrypt the message
plain_text = cipher_suite.decrypt(cipher_text)
```

**Note**: When implementing cryptographic systems, understand the mathematical principles behind algorithms and their security implications. Use well-recognized libraries and don't attempt to create your own cryptographic algorithms.

Next week, we will delve deeper into cryptographic protocols, discuss their implementations and limitations, and explore advanced topics like digital signatures and public-key infrastructure (PKI). Your understanding of basic ciphers this week will lay the foundation for grasping these more complex concepts.