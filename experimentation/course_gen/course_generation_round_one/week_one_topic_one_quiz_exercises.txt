### Quiz Questions + Answers

1. **What is the main purpose of cryptography?**
   - A) Speed up communication
   - B) Secure communication in the presence of adversaries
   - C) Increase the data size
   - D) Improve internet speed

2. **Which of the following is NOT a goal of cryptography?**
   - A) Confidentiality
   - B) Integrity
   - C) Authenticity
   - D) Visibility

3. **What is the difference between symmetric and asymmetric key cryptography?**
   - A) Symmetric uses the same key for encryption and decryption; asymmetric uses a pair of keys.
   - B) Asymmetric uses the same key for encryption and decryption; symmetric uses a pair of keys.
   - C) There is no difference; both terms mean the same.
   - D) Symmetric key cryptography is faster but less secure than asymmetric.

4. **Which Python library is mentioned for implementing cryptographic algorithms?**
   - A) NumPy
   - B) SymPy
   - C) cryptography
   - D) Requests

5. **For which type of cryptography is AES an example?**
   - A) Symmetric-Key Cryptography
   - B) Asymmetric-Key Cryptography
   - C) Hash Function
   - D) Quantum Cryptography

6. **What does non-repudiation mean in the context of cryptography?**
   - A) The ability to ensure that a message has not been altered
   - B) Keeping the message content hidden from anyone but the intended recipient
   - C) The sender cannot deny sending the message
   - D) Verifying the sender's identity

7. **Why might you choose symmetric key cryptography over asymmetric key cryptography for encrypting bulk data?**
   - A) It is less secure and faster.
   - B) It uses larger keys for better security.
   - C) It is typically more efficient and faster for bulk encryption.
   - D) Public keys are easier to distribute.

8. **How is the `cryptography` library installed in Python?**
   - A) npm install cryptography
   - B) python -m cryptography
   - C) pip install cryptography
   - D) brew install cryptography

### Exercises

1. **Symmetric Encryption with Python:** Using the `cryptography` library, write a Python function named `encrypt_message` that takes a string message and a key as parameters, and returns the encrypted message using AES encryption. Also, write the `decrypt_message` function to decrypt the returned encrypted message using the same key.

2. **Implement Caesar Cipher:** Write a Python program that implements the Caesar cipher. The program should include two functions - `encrypt` and `decrypt`. The `encrypt` function should take the plaintext message and the shift value as arguments and return the encrypted message. The `decrypt` function should take the ciphered text and the shift value to return the original message.

3. **Key Generation Exercise:** Generate a secure key and initialization vector (IV) suitable for use with AES encryption using Python's `cryptography` library. Save these keys to a file securely.

4. **Message Integrity Check:** Using Python, write a simple program that hashes a message using SHA-256 (you can use the `hashlib` library), showing how you could check the integrity of the message.

5. **URL Encryption Exercise:** Build a simple Python application that accepts a message from the user, encrypts it, and then generates a URL containing the encrypted message. Also, create the functionality to decrypt the message when the URL is visited, displaying the original message to the user. This will require understanding how to handle URL encoding and decoding in Python.

These exercises aim to solidify the student's understanding of basic cryptographic principles and their application in Python, aligning with their goals and background.